#!/usr/bin/env python3

import pigpio
import time
import math
from math import sin, acos, sqrt, atan2

pi = pigpio.pi()

def write_Angles(alpha, beta, gamma):
    alpha_us = 500 + (alpha+77)/180*2000
    beta_us = 500 + (beta+35)/180*2000
    gamma_us = 500 + (gamma+60)/180*2000

    # 500us ... 2500us
    pi.set_servo_pulsewidth(14, alpha_us)
    pi.set_servo_pulsewidth(15, beta_us)
    pi.set_servo_pulsewidth(18, gamma_us)

def xyz2xza(x,y,z):
    z_ = z
    r = (x**2 + y**2 + z**2)**(1/2)

    if(r==0):
        x_ = 0
    else:
        if (z/r > 1):
            x_ = 0
        else:
            x_ = r*sin(acos(z/r))
       
    if(x==0 and y==0):
        alpha = 0
    else:
        if x/x_ > 1:
            alpha = 0
        else:
            alpha = acos(x/x_)*abs(y)
        
        
    return [x_, z_, alpha]

def xyz2abg(x,y,z):

    [x_, z_, alpha] = xyz2xza(x,y,z)

    z0 = 58
    l1 = 80
    l2 = 80

    # Avoid singularity
    delta = 0.001
    if z_ > z0-delta and z_< z0+delta:
        z_ = z0+delta

    if(z<58):
        beta = atan2((z0**2*x_ - 2*z0*x_*z_ + l1**2*x_ - l2**2*x_ + x_**3 + x_*z_**2 + sqrt(-z0**6 + 6*z0**5*z_ + 2*z0**4*l1**2 + 2*z0**4*l2**2 - 2*z0**4*x_**2 - 15*z0**4*z_**2 - 8*z0**3*l1**2*z_ - 8*z0**3*l2**2*z_ + 8*z0**3*x_**2*z_ + 20*z0**3*z_**3 - z0**2*l1**4 + 2*z0**2*l1**2*l2**2 + 2*z0**2*l1**2*x_**2 + 12*z0**2*l1**2*z_**2 - z0**2*l2**4 + 2*z0**2*l2**2*x_**2 + 12*z0**2*l2**2*z_**2 - z0**2*x_**4 - 12*z0**2*x_**2*z_**2 - 15*z0**2*z_**4 + 2*z0*l1**4*z_ - 4*z0*l1**2*l2**2*z_ - 4*z0*l1**2*x_**2*z_ - 8*z0*l1**2*z_**3 + 2*z0*l2**4*z_ - 4*z0*l2**2*x_**2*z_ - 8*z0*l2**2*z_**3 + 2*z0*x_**4*z_ + 8*z0*x_**2*z_**3 + 6*z0*z_**5 - l1**4*z_**2 + 2*l1**2*l2**2*z_**2 + 2*l1**2*x_**2*z_**2 + 2*l1**2*z_**4 - l2**4*z_**2 + 2*l2**2*x_**2*z_**2 + 2*l2**2*z_**4 - x_**4*z_**2 - 2*x_**2*z_**4 - z_**6))/(z0**2 - 2*z0*z_ + x_**2 + z_**2), (x_*(z0**2*x_ - 2*z0*x_*z_ + l1**2*x_ - l2**2*x_ + x_**3 + x_*z_**2 + sqrt(-z0**6 + 6*z0**5*z_ + 2*z0**4*l1**2 + 2*z0**4*l2**2 - 2*z0**4*x_**2 - 15*z0**4*z_**2 - 8*z0**3*l1**2*z_ - 8*z0**3*l2**2*z_ + 8*z0**3*x_**2*z_ + 20*z0**3*z_**3 - z0**2*l1**4 + 2*z0**2*l1**2*l2**2 + 2*z0**2*l1**2*x_**2 + 12*z0**2*l1**2*z_**2 - z0**2*l2**4 + 2*z0**2*l2**2*x_**2 + 12*z0**2*l2**2*z_**2 - z0**2*x_**4 - 12*z0**2*x_**2*z_**2 - 15*z0**2*z_**4 + 2*z0*l1**4*z_ - 4*z0*l1**2*l2**2*z_ - 4*z0*l1**2*x_**2*z_ - 8*z0*l1**2*z_**3 + 2*z0*l2**4*z_ - 4*z0*l2**2*x_**2*z_ - 8*z0*l2**2*z_**3 + 2*z0*x_**4*z_ + 8*z0*x_**2*z_**3 + 6*z0*z_**5 - l1**4*z_**2 + 2*l1**2*l2**2*z_**2 + 2*l1**2*x_**2*z_**2 + 2*l1**2*z_**4 - l2**4*z_**2 + 2*l2**2*x_**2*z_**2 + 2*l2**2*z_**4 - x_**4*z_**2 - 2*x_**2*z_**4 - z_**6))/(z0**2 - 2*z0*z_ + x_**2 + z_**2) - z0**2 + 2*z0*z_ - l1**2 + l2**2 - x_**2 - z_**2)/(z0 - z_))
        gamma = atan2(-(z0**2*x_ - 2*z0*x_*z_ + l1**2*x_ - l2**2*x_ + x_**3 + x_*z_**2 + sqrt(-z0**6 + 6*z0**5*z_ + 2*z0**4*l1**2 + 2*z0**4*l2**2 - 2*z0**4*x_**2 - 15*z0**4*z_**2 - 8*z0**3*l1**2*z_ - 8*z0**3*l2**2*z_ + 8*z0**3*x_**2*z_ + 20*z0**3*z_**3 - z0**2*l1**4 + 2*z0**2*l1**2*l2**2 + 2*z0**2*l1**2*x_**2 + 12*z0**2*l1**2*z_**2 - z0**2*l2**4 + 2*z0**2*l2**2*x_**2 + 12*z0**2*l2**2*z_**2 - z0**2*x_**4 - 12*z0**2*x_**2*z_**2 - 15*z0**2*z_**4 + 2*z0*l1**4*z_ - 4*z0*l1**2*l2**2*z_ - 4*z0*l1**2*x_**2*z_ - 8*z0*l1**2*z_**3 + 2*z0*l2**4*z_ - 4*z0*l2**2*x_**2*z_ - 8*z0*l2**2*z_**3 + 2*z0*x_**4*z_ + 8*z0*x_**2*z_**3 + 6*z0*z_**5 - l1**4*z_**2 + 2*l1**2*l2**2*z_**2 + 2*l1**2*x_**2*z_**2 + 2*l1**2*z_**4 - l2**4*z_**2 + 2*l2**2*x_**2*z_**2 + 2*l2**2*z_**4 - x_**4*z_**2 - 2*x_**2*z_**4 - z_**6))/(2*(z0**2 - 2*z0*z_ + x_**2 + z_**2)) + x_, (x_*(z0**2*x_ - 2*z0*x_*z_ + l1**2*x_ - l2**2*x_ + x_**3 + x_*z_**2 + sqrt(-z0**6 + 6*z0**5*z_ + 2*z0**4*l1**2 + 2*z0**4*l2**2 - 2*z0**4*x_**2 - 15*z0**4*z_**2 - 8*z0**3*l1**2*z_ - 8*z0**3*l2**2*z_ + 8*z0**3*x_**2*z_ + 20*z0**3*z_**3 - z0**2*l1**4 + 2*z0**2*l1**2*l2**2 + 2*z0**2*l1**2*x_**2 + 12*z0**2*l1**2*z_**2 - z0**2*l2**4 + 2*z0**2*l2**2*x_**2 + 12*z0**2*l2**2*z_**2 - z0**2*x_**4 - 12*z0**2*x_**2*z_**2 - 15*z0**2*z_**4 + 2*z0*l1**4*z_ - 4*z0*l1**2*l2**2*z_ - 4*z0*l1**2*x_**2*z_ - 8*z0*l1**2*z_**3 + 2*z0*l2**4*z_ - 4*z0*l2**2*x_**2*z_ - 8*z0*l2**2*z_**3 + 2*z0*x_**4*z_ + 8*z0*x_**2*z_**3 + 6*z0*z_**5 - l1**4*z_**2 + 2*l1**2*l2**2*z_**2 + 2*l1**2*x_**2*z_**2 + 2*l1**2*z_**4 - l2**4*z_**2 + 2*l2**2*x_**2*z_**2 + 2*l2**2*z_**4 - x_**4*z_**2 - 2*x_**2*z_**4 - z_**6))/(z0**2 - 2*z0*z_ + x_**2 + z_**2) + z0**2 - 2*z0*z_ - l1**2 + l2**2 - x_**2 + z_**2)/(2*(z0 - z_)))
    else:
        beta = atan2(-(-z0**2*x_ + 2*z0*x_*z_ - l1**2*x_ + l2**2*x_ - x_**3 - x_*z_**2 + sqrt(-z0**6 + 6*z0**5*z_ + 2*z0**4*l1**2 + 2*z0**4*l2**2 - 2*z0**4*x_**2 - 15*z0**4*z_**2 - 8*z0**3*l1**2*z_ - 8*z0**3*l2**2*z_ + 8*z0**3*x_**2*z_ + 20*z0**3*z_**3 - z0**2*l1**4 + 2*z0**2*l1**2*l2**2 + 2*z0**2*l1**2*x_**2 + 12*z0**2*l1**2*z_**2 - z0**2*l2**4 + 2*z0**2*l2**2*x_**2 + 12*z0**2*l2**2*z_**2 - z0**2*x_**4 - 12*z0**2*x_**2*z_**2 - 15*z0**2*z_**4 + 2*z0*l1**4*z_ - 4*z0*l1**2*l2**2*z_ - 4*z0*l1**2*x_**2*z_ - 8*z0*l1**2*z_**3 + 2*z0*l2**4*z_ - 4*z0*l2**2*x_**2*z_ - 8*z0*l2**2*z_**3 + 2*z0*x_**4*z_ + 8*z0*x_**2*z_**3 + 6*z0*z_**5 - l1**4*z_**2 + 2*l1**2*l2**2*z_**2 + 2*l1**2*x_**2*z_**2 + 2*l1**2*z_**4 - l2**4*z_**2 + 2*l2**2*x_**2*z_**2 + 2*l2**2*z_**4 - x_**4*z_**2 - 2*x_**2*z_**4 - z_**6))/(2*(z0**2 - 2*z0*z_ + x_**2 + z_**2)), (-x_*(-z0**2*x_ + 2*z0*x_*z_ - l1**2*x_ + l2**2*x_ - x_**3 - x_*z_**2 + sqrt(-z0**6 + 6*z0**5*z_ + 2*z0**4*l1**2 + 2*z0**4*l2**2 - 2*z0**4*x_**2 - 15*z0**4*z_**2 - 8*z0**3*l1**2*z_ - 8*z0**3*l2**2*z_ + 8*z0**3*x_**2*z_ + 20*z0**3*z_**3 - z0**2*l1**4 + 2*z0**2*l1**2*l2**2 + 2*z0**2*l1**2*x_**2 + 12*z0**2*l1**2*z_**2 - z0**2*l2**4 + 2*z0**2*l2**2*x_**2 + 12*z0**2*l2**2*z_**2 - z0**2*x_**4 - 12*z0**2*x_**2*z_**2 - 15*z0**2*z_**4 + 2*z0*l1**4*z_ - 4*z0*l1**2*l2**2*z_ - 4*z0*l1**2*x_**2*z_ - 8*z0*l1**2*z_**3 + 2*z0*l2**4*z_ - 4*z0*l2**2*x_**2*z_ - 8*z0*l2**2*z_**3 + 2*z0*x_**4*z_ + 8*z0*x_**2*z_**3 + 6*z0*z_**5 - l1**4*z_**2 + 2*l1**2*l2**2*z_**2 + 2*l1**2*x_**2*z_**2 + 2*l1**2*z_**4 - l2**4*z_**2 + 2*l2**2*x_**2*z_**2 + 2*l2**2*z_**4 - x_**4*z_**2 - 2*x_**2*z_**4 - z_**6))/(z0**2 - 2*z0*z_ + x_**2 + z_**2) - z0**2 + 2*z0*z_ - l1**2 + l2**2 - x_**2 - z_**2)/(2*(z0 - z_)))
        gamma = atan2((-z0**2*x_ + 2*z0*x_*z_ - l1**2*x_ + l2**2*x_ - x_**3 - x_*z_**2 + sqrt(-z0**6 + 6*z0**5*z_ + 2*z0**4*l1**2 + 2*z0**4*l2**2 - 2*z0**4*x_**2 - 15*z0**4*z_**2 - 8*z0**3*l1**2*z_ - 8*z0**3*l2**2*z_ + 8*z0**3*x_**2*z_ + 20*z0**3*z_**3 - z0**2*l1**4 + 2*z0**2*l1**2*l2**2 + 2*z0**2*l1**2*x_**2 + 12*z0**2*l1**2*z_**2 - z0**2*l2**4 + 2*z0**2*l2**2*x_**2 + 12*z0**2*l2**2*z_**2 - z0**2*x_**4 - 12*z0**2*x_**2*z_**2 - 15*z0**2*z_**4 + 2*z0*l1**4*z_ - 4*z0*l1**2*l2**2*z_ - 4*z0*l1**2*x_**2*z_ - 8*z0*l1**2*z_**3 + 2*z0*l2**4*z_ - 4*z0*l2**2*x_**2*z_ - 8*z0*l2**2*z_**3 + 2*z0*x_**4*z_ + 8*z0*x_**2*z_**3 + 6*z0*z_**5 - l1**4*z_**2 + 2*l1**2*l2**2*z_**2 + 2*l1**2*x_**2*z_**2 + 2*l1**2*z_**4 - l2**4*z_**2 + 2*l2**2*x_**2*z_**2 + 2*l2**2*z_**4 - x_**4*z_**2 - 2*x_**2*z_**4 - z_**6))/(2*(z0**2 - 2*z0*z_ + x_**2 + z_**2)) + x_, (-x_*(-z0**2*x_ + 2*z0*x_*z_ - l1**2*x_ + l2**2*x_ - x_**3 - x_*z_**2 + sqrt(-z0**6 + 6*z0**5*z_ + 2*z0**4*l1**2 + 2*z0**4*l2**2 - 2*z0**4*x_**2 - 15*z0**4*z_**2 - 8*z0**3*l1**2*z_ - 8*z0**3*l2**2*z_ + 8*z0**3*x_**2*z_ + 20*z0**3*z_**3 - z0**2*l1**4 + 2*z0**2*l1**2*l2**2 + 2*z0**2*l1**2*x_**2 + 12*z0**2*l1**2*z_**2 - z0**2*l2**4 + 2*z0**2*l2**2*x_**2 + 12*z0**2*l2**2*z_**2 - z0**2*x_**4 - 12*z0**2*x_**2*z_**2 - 15*z0**2*z_**4 + 2*z0*l1**4*z_ - 4*z0*l1**2*l2**2*z_ - 4*z0*l1**2*x_**2*z_ - 8*z0*l1**2*z_**3 + 2*z0*l2**4*z_ - 4*z0*l2**2*x_**2*z_ - 8*z0*l2**2*z_**3 + 2*z0*x_**4*z_ + 8*z0*x_**2*z_**3 + 6*z0*z_**5 - l1**4*z_**2 + 2*l1**2*l2**2*z_**2 + 2*l1**2*x_**2*z_**2 + 2*l1**2*z_**4 - l2**4*z_**2 + 2*l2**2*x_**2*z_**2 + 2*l2**2*z_**4 - x_**4*z_**2 - 2*x_**2*z_**4 - z_**6))/(z0**2 - 2*z0*z_ + x_**2 + z_**2) + z0**2 - 2*z0*z_ - l1**2 + l2**2 - x_**2 + z_**2)/(2*(z0 - z_)))
    
    alpha = alpha.real*180.0/math.pi
    beta = beta.real*180/math.pi
    gamma = gamma.real*180/math.pi
    
    return [alpha, beta, gamma]

if __name__ == '__main__':
    
    steps = 200
    pause = 0.001
    
    [alpha, beta, gamma] = xyz2abg(80,0,138)
    
    for x in range(0, steps+1):
        z = 138 - 130*x/steps
        [alpha, beta, gamma] = xyz2abg(80,0,z)
        write_Angles(alpha, beta, gamma)
        time.sleep(pause)
        
    for x in range(0, steps+1):
        z = 8 + 130*x/steps
        [alpha, beta, gamma] = xyz2abg(80,0,z)
        write_Angles(alpha, beta, gamma)
        time.sleep(pause)
    